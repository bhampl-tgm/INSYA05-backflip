// Plugins
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'

// Deploy setting
def deployNames = 'HamplKritzl_A05'

// Run settings
def runHostname = 'localhost'
def runDatabse = 'backflip'
def runUser = 'insy4'
def runPassword = 'blabla'

// Other setting
sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '1.0'

// Repositories
repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

// Dependencies
dependencies {
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.34'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'args4j', name: 'args4j', version: '2.0.29'
    compile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.8.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.+'
}

// Run tasks
task runRM(type: JavaExec, dependsOn: ['classes']) {
    main = 'at.ac.tgm.hit.insy.a05.Main'
    classpath = sourceSets.main.runtimeClasspath
    args '-h', runHostname, '-d', runDatabse, '-u', runUser, '-o', 'build/rm.html', '-f', 'RM', '-p', runPassword
    standardInput = System.in
}

task runEER(type: JavaExec, dependsOn: ['classes']) {
    main = 'at.ac.tgm.hit.insy.a05.Main'
    classpath = sourceSets.main.runtimeClasspath
    args '-h', runHostname, '-d', runDatabse, '-u', runUser, '-o', 'build/eer.dot', '-f', 'EER', '-p', runPassword
    standardInput = System.in
}

// Build Jar
task buildJar(type: Jar, dependsOn: ['clean', 'javadoc', 'test']) {
    manifest {
        attributes 'Implementation-Title': rootProject.name,
                'Implementation-Version': version,
                'Main-Class': 'at.ac.tgm.hit.insy.a05.Main'
    }
    baseName = deployNames
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    from(javadoc.destinationDir) {
        into('doc/javadoc')
    }
    from(jacocoTestReport.outputs.files) {
        into('doc/testCoverage')
    }
    from(test.outputs.files) {
        into('doc/testReport')
    }
    from(projectDir) {
        include 'doc/**'
        exclude 'doc/*.docx'
    }
    from('.git') {
        into('.git')
    }
    with jar
}

compileJava.mustRunAfter clean

