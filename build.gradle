// Plugins
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'

// Deploy setting
def deployNames = 'HamplKritzl_A05'

// Run settings
def runHostname = 'localhost'
def runDatabse = 'backflip'
def runUser = 'backflip'

// Other setting
sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '0.1'

// Repositories
repositories {
    mavenCentral()
}

// Setting for code coverage
jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

// Dependencies
dependencies {
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.34'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'
    compile group: 'args4j', name: 'args4j', version: '2.0.29'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.+'
    compile files('lib/log4j-1.2.17.jar')
}

// Run tasks
task runRM(type: JavaExec, dependsOn: ['classes']) {
    main = 'at.ac.tgm.hit.insy.a05.Main'
    classpath = sourceSets.main.runtimeClasspath
    args '-h', runHostname, '-d', runDatabse, '-u', runUser, '-o', 'build/rm.html', '-f', 'RM'
    standardInput = System.in
}

task runEER(type: JavaExec, dependsOn: ['classes']) {
    main = 'at.ac.tgm.hit.insy.a05.Main'
    classpath = sourceSets.main.runtimeClasspath
    args '-h', runHostname, '-d', runDatabse, '-u', runUser, '-o', 'build/eer.svg', '-f', 'EER'
    standardInput = System.in
}

// Build Jar
task buildJar(type: Jar, dependsOn: ['javadoc']) {
    manifest {
        attributes 'Implementation-Title': rootProject.name,
                'Implementation-Version': version,
                'Main-Class': 'at.ac.tgm.hit.insy.a05.Main'
    }
    baseName = deployNames
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    from (javadoc.destinationDir) {
        into ('doc')
    }
    from (projectDir) {
        include 'doc/**'
        exclude 'doc/*.docx'
    }
    from ('.git') {
        into ('.git')
    }
    with jar
}
